/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.radarcns.monitor.application;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Error encountered in the application. */
@org.apache.avro.specific.AvroGenerated
public class ApplicationError extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1508814728922345968L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ApplicationError\",\"namespace\":\"org.radarcns.monitor.application\",\"doc\":\"Error encountered in the application.\",\"fields\":[{\"name\":\"time\",\"type\":\"double\",\"doc\":\"Device timestamp in UTC (s).\"},{\"name\":\"plugin\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name of a plugin reporting error.\"},{\"name\":\"code\",\"type\":\"int\",\"doc\":\"Error code assigned with the error.\"},{\"name\":\"message\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The error message associated with the error.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ApplicationError> ENCODER =
      new BinaryMessageEncoder<ApplicationError>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ApplicationError> DECODER =
      new BinaryMessageDecoder<ApplicationError>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ApplicationError> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ApplicationError> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ApplicationError>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ApplicationError to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ApplicationError from a ByteBuffer. */
  public static ApplicationError fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Device timestamp in UTC (s). */
  @Deprecated public double time;
  /** Name of a plugin reporting error. */
  @Deprecated public java.lang.String plugin;
  /** Error code assigned with the error. */
  @Deprecated public int code;
  /** The error message associated with the error. */
  @Deprecated public java.lang.String message;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ApplicationError() {}

  /**
   * All-args constructor.
   * @param time Device timestamp in UTC (s).
   * @param plugin Name of a plugin reporting error.
   * @param code Error code assigned with the error.
   * @param message The error message associated with the error.
   */
  public ApplicationError(java.lang.Double time, java.lang.String plugin, java.lang.Integer code, java.lang.String message) {
    this.time = time;
    this.plugin = plugin;
    this.code = code;
    this.message = message;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return time;
    case 1: return plugin;
    case 2: return code;
    case 3: return message;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: time = (java.lang.Double)value$; break;
    case 1: plugin = (java.lang.String)value$; break;
    case 2: code = (java.lang.Integer)value$; break;
    case 3: message = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'time' field.
   * @return Device timestamp in UTC (s).
   */
  public java.lang.Double getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * Device timestamp in UTC (s).
   * @param value the value to set.
   */
  public void setTime(java.lang.Double value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'plugin' field.
   * @return Name of a plugin reporting error.
   */
  public java.lang.String getPlugin() {
    return plugin;
  }

  /**
   * Sets the value of the 'plugin' field.
   * Name of a plugin reporting error.
   * @param value the value to set.
   */
  public void setPlugin(java.lang.String value) {
    this.plugin = value;
  }

  /**
   * Gets the value of the 'code' field.
   * @return Error code assigned with the error.
   */
  public java.lang.Integer getCode() {
    return code;
  }

  /**
   * Sets the value of the 'code' field.
   * Error code assigned with the error.
   * @param value the value to set.
   */
  public void setCode(java.lang.Integer value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'message' field.
   * @return The error message associated with the error.
   */
  public java.lang.String getMessage() {
    return message;
  }

  /**
   * Sets the value of the 'message' field.
   * The error message associated with the error.
   * @param value the value to set.
   */
  public void setMessage(java.lang.String value) {
    this.message = value;
  }

  /**
   * Creates a new ApplicationError RecordBuilder.
   * @return A new ApplicationError RecordBuilder
   */
  public static org.radarcns.monitor.application.ApplicationError.Builder newBuilder() {
    return new org.radarcns.monitor.application.ApplicationError.Builder();
  }

  /**
   * Creates a new ApplicationError RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ApplicationError RecordBuilder
   */
  public static org.radarcns.monitor.application.ApplicationError.Builder newBuilder(org.radarcns.monitor.application.ApplicationError.Builder other) {
    return new org.radarcns.monitor.application.ApplicationError.Builder(other);
  }

  /**
   * Creates a new ApplicationError RecordBuilder by copying an existing ApplicationError instance.
   * @param other The existing instance to copy.
   * @return A new ApplicationError RecordBuilder
   */
  public static org.radarcns.monitor.application.ApplicationError.Builder newBuilder(org.radarcns.monitor.application.ApplicationError other) {
    return new org.radarcns.monitor.application.ApplicationError.Builder(other);
  }

  /**
   * RecordBuilder for ApplicationError instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ApplicationError>
    implements org.apache.avro.data.RecordBuilder<ApplicationError> {

    /** Device timestamp in UTC (s). */
    private double time;
    /** Name of a plugin reporting error. */
    private java.lang.String plugin;
    /** Error code assigned with the error. */
    private int code;
    /** The error message associated with the error. */
    private java.lang.String message;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.radarcns.monitor.application.ApplicationError.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.plugin)) {
        this.plugin = data().deepCopy(fields()[1].schema(), other.plugin);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.code)) {
        this.code = data().deepCopy(fields()[2].schema(), other.code);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.message)) {
        this.message = data().deepCopy(fields()[3].schema(), other.message);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ApplicationError instance
     * @param other The existing instance to copy.
     */
    private Builder(org.radarcns.monitor.application.ApplicationError other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.plugin)) {
        this.plugin = data().deepCopy(fields()[1].schema(), other.plugin);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.code)) {
        this.code = data().deepCopy(fields()[2].schema(), other.code);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.message)) {
        this.message = data().deepCopy(fields()[3].schema(), other.message);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'time' field.
      * Device timestamp in UTC (s).
      * @return The value.
      */
    public java.lang.Double getTime() {
      return time;
    }

    /**
      * Sets the value of the 'time' field.
      * Device timestamp in UTC (s).
      * @param value The value of 'time'.
      * @return This builder.
      */
    public org.radarcns.monitor.application.ApplicationError.Builder setTime(double value) {
      validate(fields()[0], value);
      this.time = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * Device timestamp in UTC (s).
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'time' field.
      * Device timestamp in UTC (s).
      * @return This builder.
      */
    public org.radarcns.monitor.application.ApplicationError.Builder clearTime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'plugin' field.
      * Name of a plugin reporting error.
      * @return The value.
      */
    public java.lang.String getPlugin() {
      return plugin;
    }

    /**
      * Sets the value of the 'plugin' field.
      * Name of a plugin reporting error.
      * @param value The value of 'plugin'.
      * @return This builder.
      */
    public org.radarcns.monitor.application.ApplicationError.Builder setPlugin(java.lang.String value) {
      validate(fields()[1], value);
      this.plugin = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'plugin' field has been set.
      * Name of a plugin reporting error.
      * @return True if the 'plugin' field has been set, false otherwise.
      */
    public boolean hasPlugin() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'plugin' field.
      * Name of a plugin reporting error.
      * @return This builder.
      */
    public org.radarcns.monitor.application.ApplicationError.Builder clearPlugin() {
      plugin = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'code' field.
      * Error code assigned with the error.
      * @return The value.
      */
    public java.lang.Integer getCode() {
      return code;
    }

    /**
      * Sets the value of the 'code' field.
      * Error code assigned with the error.
      * @param value The value of 'code'.
      * @return This builder.
      */
    public org.radarcns.monitor.application.ApplicationError.Builder setCode(int value) {
      validate(fields()[2], value);
      this.code = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * Error code assigned with the error.
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'code' field.
      * Error code assigned with the error.
      * @return This builder.
      */
    public org.radarcns.monitor.application.ApplicationError.Builder clearCode() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * The error message associated with the error.
      * @return The value.
      */
    public java.lang.String getMessage() {
      return message;
    }

    /**
      * Sets the value of the 'message' field.
      * The error message associated with the error.
      * @param value The value of 'message'.
      * @return This builder.
      */
    public org.radarcns.monitor.application.ApplicationError.Builder setMessage(java.lang.String value) {
      validate(fields()[3], value);
      this.message = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * The error message associated with the error.
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'message' field.
      * The error message associated with the error.
      * @return This builder.
      */
    public org.radarcns.monitor.application.ApplicationError.Builder clearMessage() {
      message = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ApplicationError build() {
      try {
        ApplicationError record = new ApplicationError();
        record.time = fieldSetFlags()[0] ? this.time : (java.lang.Double) defaultValue(fields()[0]);
        record.plugin = fieldSetFlags()[1] ? this.plugin : (java.lang.String) defaultValue(fields()[1]);
        record.code = fieldSetFlags()[2] ? this.code : (java.lang.Integer) defaultValue(fields()[2]);
        record.message = fieldSetFlags()[3] ? this.message : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ApplicationError>
    WRITER$ = (org.apache.avro.io.DatumWriter<ApplicationError>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ApplicationError>
    READER$ = (org.apache.avro.io.DatumReader<ApplicationError>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
